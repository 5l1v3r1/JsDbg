.block { as ${/v:JsDbgVersion} 2017-02-15-02.zip}
.block { as ${/v:JsDbgPath} \\iefs\users\psalas\jsdbg\jsdbg.exe}
.block { as ${/v:JsDbgStrPath} "\\\\iefs\\users\\psalas\\jsdbg\\jsdbg.exe ${JsDbgVersion}"}

r $t0 = 0; $$ found remote
r $t1 = 0; $$ connect to next remote
r $t2 = 1; $$ should create a remote

.while (1)
{
    .foreach (server {.servers})
    {
        .if (@$t0 & @$t1)
        {
            .catch {
                $$ Copy the launcher locally in case we're running in a post-mortem debugger, where the debugger cannot run code from a share.
                .block {.shell -x copy /Y ${JsDbgPath} %TEMP%\jsdbg.exe && copy /Y \\iefs\users\psalas\jsdbg\JsDbg.Remoting.dll %TEMP%\JsDbg.Remoting.dll && %TEMP%\jsdbg.exe /silent \\iefs\users\psalas\jsdbg\${JsDbgVersion} ${server}};
                .break;
            };
            .printf "\r\nUnable to launch JsDbg, perhaps because shell commands are disabled.  Run\r\n\r\n";
            .printf ${JsDbgStrPath};
            .printf " ${server} \r\n\r\nlocally to launch.\r\n";
            .break;
        }
        .elsif (@$t0 & @@masm($spat("${server}", "*ipe=jsdbg-*")))
        {
            $$ there's already a jsdbg remote running.  we can connect the next time around if this is the only remote.
            r $t2 = 0;
            r $t0 = 0;
        }
        .elsif (@$t0)
        {
            .printf "An existing remote was found. Run\r\n\r\n";
            .printf ${JsDbgStrPath};
            .printf " ${server} \r\n\r\nlocally to launch.\r\n";
            .break;
        }


        .if (@@masm($scmp("${server}", "-remote")) == 0)
        {
            r $t0 = 1;
        }
    }

    .if (@$t0)
    {
        .break;
    }
    .elsif (@$t1)
    {
        .printf "Unable to find or start a remote debugging server.\r\n";
        .break;
    }
    .elsif (@$t2)
    {
        .block {.server npipe:pipe=jsdbg-%x}
    }
    r $t1 = 1;
}

r $t0 = 0;
r $t1 = 0;
r $t2 = 0;

.block { ad ${/v:JsDbgVersion} }
.block { ad ${/v:JsDbgPath} }
.block { ad ${/v:JsDbgStrPath} }
